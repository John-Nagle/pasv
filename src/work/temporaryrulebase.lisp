(PROVE-LEMMA PLUS-0 (REWRITE) (EQUAL (PLUS X 0) (FIX X)))
(PROVE-LEMMA PLUS-1 (REWRITE) (IMPLIES (NUMBERP X) (EQUAL (PLUS 1 X) (ADD1 X))))
(PROVE-LEMMA PLUS-ADD1 (REWRITE) (EQUAL (PLUS X (ADD1 Y)) (IF (NUMBERP Y) (ADD1 (PLUS X Y)) (ADD1 X))))
(PROVE-LEMMA PLUS-CANCELLATION (REWRITE) (EQUAL (EQUAL (PLUS A B) (PLUS A C)) (EQUAL (FIX B) (FIX C))))
(PROVE-LEMMA PLUS-DIFFERENCE3 (REWRITE) (EQUAL (DIFFERENCE (PLUS X Y) (PLUS X Z)) (DIFFERENCE Y Z)))
(PROVE-LEMMA PLUS-EQUAL-0 (REWRITE) (EQUAL (EQUAL (PLUS A B) 0) (AND (ZEROP A) (ZEROP B))))
(PROVE-LEMMA PLUS-NON-NUMBERP (REWRITE) (IMPLIES (NOT (NUMBERP Y)) (EQUAL (PLUS X Y) (FIX X))))
(PROVE-LEMMA PLUS-RIGHT-ID2 (REWRITE) (IMPLIES (NOT (NUMBERP Y)) (EQUAL (PLUS X Y) (FIX X))))
(PROVE-LEMMA EQUAL-LESSP (REWRITE) (EQUAL (EQUAL (LESSP X Y) Z) (IF (LESSP X Y) (EQUAL T Z) (EQUAL F Z))))
(PROVE-LEMMA ASSOCIATIVITY-OF-PLUS (REWRITE) (EQUAL (PLUS (PLUS X Y) Z) (PLUS X (PLUS Y Z))))
(PROVE-LEMMA COMMUTATIVITY-OF-PLUS (REWRITE) (EQUAL (PLUS X Y) (PLUS Y X)))
(PROVE-LEMMA COMMUTATIVITY2-OF-PLUS (REWRITE) (EQUAL (PLUS X (PLUS Y Z)) (PLUS Y (PLUS X Z))))
(PROVE-LEMMA DIFFERENCE-PLUS-1 (REWRITE) (EQUAL (DIFFERENCE (PLUS X Y) X) (FIX Y)))
(PROVE-LEMMA DIFFERENCE-PLUS-2 (REWRITE) (EQUAL (DIFFERENCE (PLUS Y X) X) (FIX Y)))
(PROVE-LEMMA DIFFERENCE-X-X (REWRITE) (EQUAL (DIFFERENCE X X) 0))
(PROVE-LEMMA EQUAL-DIFFERENCE-0 (REWRITE) (EQUAL (EQUAL 0 (DIFFERENCE X Y)) (NOT (LESSP Y X))))
(PROVE-LEMMA EQUAL-TIMES-0 (REWRITE) (EQUAL (EQUAL (TIMES X Y) 0) (OR (ZEROP X) (ZEROP Y))))
(PROVE-LEMMA MONOTONICITY-OF-DIFFERENCE-1 (REWRITE) (IMPLIES (AND (NUMBERP V) (NUMBERP Y) (NUMBERP Z) (NOT (LESSP Z V)) (NOT (LESSP Y V))) (EQUAL (LESSP (DIFFERENCE Y V) (DIFFERENCE Z V)) (LESSP Y Z))))
(PROVE-LEMMA MONOTONICITY-OF-DIFFERENCE-2 (REWRITE) (IMPLIES (AND (NUMBERP V) (NUMBERP Y) (NUMBERP Z) (LESSP Z V) (LESSP Y V)) (EQUAL (LESSP (DIFFERENCE V Z) (DIFFERENCE V Y)) (LESSP Y Z))))
(PROVE-LEMMA MONOTONICITY-OF-DIFFERENCE-3 (REWRITE) (IMPLIES (AND (NUMBERP W) (NUMBERP V) (NUMBERP X) (NOT (LESSP X W)) (NOT (LESSP X V))) (EQUAL (LESSP (DIFFERENCE X V) (DIFFERENCE X W)) (LESSP W V))))
(PROVE-LEMMA MONOTONICITY-OF-PLUS-1 (REWRITE) (IMPLIES (AND (NUMBERP A) (NUMBERP B) (NUMBERP C)) (EQUAL (LESSP (PLUS A B) (PLUS A C)) (LESSP B C))))
(PROVE-LEMMA TIMES-0 (REWRITE) (EQUAL (TIMES X 0) 0))
(PROVE-LEMMA TIMES-ADD1 (REWRITE) (EQUAL (TIMES X (ADD1 Y)) (IF (NUMBERP Y) (PLUS X (TIMES X Y)) (FIX X))))
(PROVE-LEMMA TIMES-NON-NUMBERP (REWRITE) (IMPLIES (NOT (NUMBERP Y)) (EQUAL (TIMES X Y) 0)))
(PROVE-LEMMA TIMES-ZERO (REWRITE) (EQUAL (TIMES X 0) 0))
(PROVE-LEMMA X-NOT-LESS-THAN-X (REWRITE) (EQUAL (LESSP X X) F))
(PROVE-LEMMA ZERO-DIFFERENCE (REWRITE) (IMPLIES (LESSP A B) (EQUAL (DIFFERENCE A B) 0)))
(PROVE-LEMMA ASSOCIATIVITY-OF-TIMES (REWRITE) (EQUAL (TIMES (TIMES X Y) Z) (TIMES X (TIMES Y Z))))
(PROVE-LEMMA COMMUTATIVITY-OF-TIMES (REWRITE) (EQUAL (TIMES X Y) (TIMES Y X)))
(PROVE-LEMMA COMMUTATIVITY2-OF-TIMES (REWRITE) (EQUAL (TIMES X (TIMES Y Z)) (TIMES Y (TIMES X Z))))
(PROVE-LEMMA DISTRIBUTIVITY-OF-TIMES-OVER-DIFFERENCE (REWRITE) (EQUAL (TIMES X (DIFFERENCE Y Z)) (DIFFERENCE (TIMES X Y) (TIMES X Z))))
(PROVE-LEMMA DISTRIBUTIVITY-OF-TIMES-OVER-PLUS (REWRITE) (EQUAL (TIMES X (PLUS Y Z)) (PLUS (TIMES X Y) (TIMES X Z))))
(PROVE-LEMMA MONOTONICITY-OF-TIMES (REWRITE) (IMPLIES (AND (NUMBERP X) (NUMBERP Y) (NUMBERP Z) (NOT (LESSP Y Z))) (EQUAL (LESSP (TIMES X Y) (TIMES X Z)) F)))
(PROVE-LEMMA MONOTONICITY-OF-TIMES-1 (REWRITE) (IMPLIES (AND (NUMBERP X) (NUMBERP Y) (NUMBERP Z) (NOT (ZEROP X))) (EQUAL (NOT (LESSP (TIMES X Y) (TIMES X Z))) (NOT (LESSP Y Z)))))
(PROVE-LEMMA MONOTONICITY-OF-TIMES-3 (REWRITE) (IMPLIES (AND (NUMBERP A) (NUMBERP B) (NUMBERP C) (NOT (EQUAL C 0))) (EQUAL (LESSP (TIMES C A) (TIMES C B)) (LESSP A B))))
(PROVE-LEMMA MONOTONICITY-OF-TIMES-BY-TWOS (REWRITE) (IMPLIES (AND (LESSP X Y) (LESSP Z W)) (LESSP (TIMES X Z) (TIMES Y W))))
(PROVE-LEMMA QUOTIENT-TIMES (REWRITE) (EQUAL (QUOTIENT (TIMES Y X) Y) (IF (ZEROP Y) 0 (FIX X))))
(PROVE-LEMMA REMAINDER-NON-NUMERIC (REWRITE) (IMPLIES (NOT (NUMBERP X)) (EQUAL (REMAINDER Y X) (FIX Y))))
(PROVE-LEMMA REMAINDER-QUOTIENT (REWRITE) (EQUAL (PLUS (REMAINDER X Y) (TIMES Y (QUOTIENT X Y))) (FIX X)))
(PROVE-LEMMA REMAINDER-QUOTIENT-ELIM (ELIM) (IMPLIES (AND (NOT (ZEROP Y)) (NUMBERP X)) (EQUAL (PLUS (REMAINDER X Y) (TIMES Y (QUOTIENT X Y))) X)))
(PROVE-LEMMA REMAINDER-WRT-1 (REWRITE) (EQUAL (REMAINDER Y 1) 0))
(PROVE-LEMMA REMAINDER-X-X (REWRITE) (EQUAL (REMAINDER X X) 0))
(ADD-SHELL UNDEFINED-OBJECT UNDEFINED UNDEFINEDP ())
(ADD-SHELL array-shell empty-array array-recognizer ((array-elt-value (NONE-OF) UNDEFINED) (array-elt-subscript (ONE-OF NUMBERP) ZERO) (array-prev (ONE-OF array-recognizer) empty-array)))
(DEFN DIFF-PLUS-1 (X Y) (DIFFERENCE (ADD1 Y) X))
(DEFN NEGATIVE-AND-NON-ZEROP (X) (IF (NEGATIVEP X) (IF (NOT (ZEROP (NEGATIVE-GUTS X))) T F) F))
(DEFN POSITIVEP (X) (IF (NUMBERP X) (IF (NOT (ZEROP X)) T F) F))
(DEFN SIGN (X) (IF (NUMBERP X) 1 (IF (NEGATIVEP X) -1 0)))
(DEFN SIGN-MULT (X Y) (IF (EQUAL X 1) Y (IF (EQUAL Y 1) -1 1)))
(DEFN ZABS (X) (IF (NEGATIVEP X) (NEGATIVE-GUTS X) X))
(DEFN ZNORMALIZE (X) (IF (NEGATIVEP X) (IF (EQUAL (NEGATIVE-GUTS X) 0) 0 X) X))
(DEFN ZMONUS (X) (ZNORMALIZE (MINUS X)))
(DEFN booleanp (X) (OR (EQUAL X (TRUE)) (EQUAL X (FALSE))))
(DEFN integerp (X) (IF (NUMBERP X) T (IF (NEGATIVEP X) (IF (ZEROP (NEGATIVE-GUTS X)) F T) F)))
(DEFN negi (X) (IF (integerp X) (IF (NEGATIVEP X) (NEGATIVE-GUTS X) (ZMONUS X)) 0))
(DEFN SWITCH (S X) (IF (EQUAL S 1) X (negi X)))
(DEFN addi (X Y) (IF (NEGATIVEP X) (IF (NEGATIVEP Y) (ZMONUS (PLUS (NEGATIVE-GUTS X) (NEGATIVE-GUTS Y))) (IF (LESSP Y (NEGATIVE-GUTS X)) (ZMONUS (DIFFERENCE (NEGATIVE-GUTS X) Y)) (DIFFERENCE Y (NEGATIVE-GUTS X)))) (IF (NEGATIVEP Y) (IF (LESSP X (NEGATIVE-GUTS Y)) (ZMONUS (DIFFERENCE (NEGATIVE-GUTS Y) X)) (DIFFERENCE X (NEGATIVE-GUTS Y))) (PLUS X Y))))
(DEFN subi (X Y) (addi X (negi Y)))
(DEFN muli (X Y) (IF (NEGATIVEP X) (IF (NEGATIVEP Y) (TIMES (NEGATIVE-GUTS X) (NEGATIVE-GUTS Y)) (ZMONUS (TIMES (NEGATIVE-GUTS X) Y))) (IF (NEGATIVEP Y) (ZMONUS (TIMES X (NEGATIVE-GUTS Y))) (TIMES X Y))))
(DEFN divi (X Y) (IF (NEGATIVEP X) (IF (NEGATIVEP Y) (QUOTIENT (NEGATIVE-GUTS X) (NEGATIVE-GUTS Y)) (ZMONUS (QUOTIENT (NEGATIVE-GUTS X) Y))) (IF (NEGATIVEP Y) (ZMONUS (QUOTIENT X (NEGATIVE-GUTS Y))) (QUOTIENT X Y))))
(DEFN lti (X Y) (IF (NEGATIVEP X) (IF (NEGATIVEP Y) (LESSP (NEGATIVE-GUTS Y) (NEGATIVE-GUTS X)) (NOT (AND (EQUAL (NEGATIVE-GUTS X) 0) (ZEROP Y)))) (IF (NEGATIVEP Y) F (LESSP X Y))))
(DEFN gei (X Y) (NOT (lti X Y)))
(DEFN gti (X Y) (lti Y X))
(DEFN lei (X Y) (NOT (lti Y X)))
(DEFN arrayp (A) (IF (array-recognizer A) (IF (EQUAL A (empty-array)) T (IF (OR (NOT (NUMBERP (array-elt-subscript A))) (EQUAL (array-elt-value A) (UNDEFINED))) F (IF (EQUAL (array-prev A) (empty-array)) T (AND (LESSP (array-elt-subscript (array-prev A)) (array-elt-subscript A)) (arrayp (array-prev A)))))) F))
(PROVE-LEMMA ARRAY-GETS-SMALLER (REWRITE) (IMPLIES (NOT (EQUAL (empty-array) (array-prev A))) (LESSP (COUNT (array-prev a)) (COUNT a))))
(DEFN selecta (A I) (IF (EQUAL (array-elt-subscript A) I) (array-elt-value A) (IF (EQUAL (array-prev A) (empty-array)) (UNDEFINED) (selecta (array-prev A) I))))
(PROVE-LEMMA storea-is-sound (REWRITE) (implies (and (arrayp a) (not (equal a (empty-array)))) (lessp (count (array-prev a)) (count a))))
(DEFN storea (A I V) (IF (NOT (arrayp A)) (empty-array) (IF (NOT (NUMBERP I)) A (IF (EQUAL A (empty-array)) (IF (EQUAL V (UNDEFINED)) (empty-array) (array-shell V I (empty-array))) (IF (EQUAL (array-elt-subscript A) I) (IF (EQUAL V (UNDEFINED)) (array-prev A) (array-shell V I (array-prev A))) (IF (LESSP (array-elt-subscript A) I) (IF (EQUAL V (UNDEFINED)) A (array-shell V I A)) (array-shell (array-elt-value A) (array-elt-subscript A) (storea (array-prev A) I V))))))))
(PROVE-LEMMA STORE-IS-PROPER (REWRITE) (EQUAL (arrayp (storea A I V)) T))
(PROVE-LEMMA SELECT-OF-STORE-1 (REWRITE) (IMPLIES (AND (arrayp A) (NUMBERP I)) (EQUAL (selecta (storea A I V) I) V)))
(PROVE-LEMMA SELECT-OF-STORE-2 (REWRITE) (IMPLIES (AND (arrayp A) (NUMBERP I) (NUMBERP J) (NOT (EQUAL I J))) (EQUAL (selecta (storea A I V) J) (selecta A J))))
(PROVE-LEMMA SELECT-OF-STORE (REWRITE) (IMPLIES (AND (arrayp A) (NUMBERP I) (NUMBERP J)) (EQUAL (selecta (storea A I V) J) (IF (EQUAL I J) V (selecta A J)))))
(PROVE-LEMMA STORE-OF-SELECT (REWRITE) (IMPLIES (AND (arrayp A) (NUMBERP I)) (EQUAL (storea A I (selecta A I)) A)))
(PROVE-LEMMA STORE-OF-STORE-1 (REWRITE) (IMPLIES (AND (arrayp A) (NUMBERP I)) (EQUAL (storea (storea A I V) I W) (storea A I W))))
(DEFN arrayconstruct (V I J) (IF (LESSP J I) (empty-array) (storea (arrayconstruct V (ADD1 I) J) I V)) ((LESSP (DIFFERENCE (ADD1 J) I))))
(PROVE-LEMMA arrayconstruct-is-arrayp (REWRITE) (arrayp (arrayconstruct V I J)))
(DCL alltrue (R))
(DCL selectr (R I))
(DCL storer (A B C))
(DEFN arraytrue (A I J) (IF (LESSP J I) T (AND (EQUAL (alltrue (selecta A I)) T) (arraytrue A (ADD1 I) J))) ((LESSP (DIFFERENCE (ADD1 J) I))))
(PROVE-LEMMA arraytrue-void-rule (REWRITE) (IMPLIES (LESSP J I) (arraytrue A I J)))
(PROVE-LEMMA arraytrue-single-rule (REWRITE) (EQUAL (EQUAL (arraytrue A I I) T) (EQUAL (alltrue (selecta A I)) T)))
(PROVE-LEMMA arraytrue-select-rule (REWRITE) (IMPLIES (AND (arraytrue A I J) (NUMBERP I) (NUMBERP J) (NUMBERP X) (NOT (LESSP X I)) (NOT (LESSP J X))) (alltrue (selecta A X))))
(PROVE-LEMMA arraytrue-unchanged-rule (REWRITE) (IMPLIES (AND (NUMBERP X) (NUMBERP I) (NUMBERP J) (arrayp A) (EQUAL (arraytrue A I J) T) (OR (LESSP X I) (LESSP J X))) (EQUAL (arraytrue (storea A X V) I J) T)))
(PROVE-LEMMA arraytrue-unchanged-2-rule (REWRITE) (IMPLIES (AND (NUMBERP X) (NUMBERP I) (NUMBERP J) (arrayp A) (EQUAL (alltrue V) T) (EQUAL (arraytrue A I J) T)) (EQUAL (arraytrue (storea A X V) I J) T)))
(PROVE-LEMMA arraytrue-extend-upward-rule (REWRITE) (IMPLIES (AND (EQUAL (arraytrue A I J) T) (EQUAL (alltrue (selecta A (ADD1 J))) T)) (EQUAL (arraytrue A I (ADD1 J)) T)))
(PROVE-LEMMA arrayconstruct-implies-arraytrue-rule (REWRITE) (IMPLIES (AND (NUMBERP I) (NUMBERP J) (EQUAL (alltrue V) T)) (EQUAL (arraytrue (arrayconstruct V I J) I J) T)))
(PROVE-LEMMA select-of-construct-0 (REWRITE) (IMPLIES (NUMBERP j) (EQUAL (arrayconstruct v 0 j) (storea (arrayconstruct v 1 j) 0 v))))
(PROVE-LEMMA arrayconstruct-select-rule (REWRITE) (IMPLIES (AND (NUMBERP I) (NUMBERP J) (NUMBERP X) (NOT (LESSP X I)) (NOT (LESSP J X))) (EQUAL (selecta (arrayconstruct V I J) X) V)))
