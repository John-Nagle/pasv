TODO for CPC4, 2017.

Conversion to Common LISP.

1. Fix "defunobj" in "defmac.l" to make function special. [DONE]
2. Fix def of "defmax" and "defsmac" for CL. [DONE]
3. Fix (defmac isenode (x) (and (hunkp x) (= (hunksize x) 18))) in enode.l to test for structure by type.
4. Fix (defun isznode (x) (and (hunkp x) (= (hunksize x) 8))) in z.l
5. Fix "progvn" in progvn.l
6. Fix "do" in "pp.l". May need to fix other "do" clauses. [partially DONE]
7. Fix (comment) in z.l   [DONE]
8. Avoid redefine of GCD in z.l by renaming. [DONE]
9. Deal with fexpr. [DONE]
10. Fix use of predefined name 'assert' in newsimp.l [DONE]
11. Deal with "defprop" in newsimp.l    [DONE]
12. Deal with "	(do j startarg (add1 j) (> j last)" in main.l
13. Deal with "" problem in simp-assign in newsplit.l [DONE]
14. Deal with "do" problem in smerge in newsplit.l [DONE]
15. Clash with predefined TIMES in builtin.l [DONE]
16. Trouble at INITGENERIC in generic.l
17. "putprop" in ruleprep.l [DONE]
18. "explodec" in eventtran.l [DONE?]
19. "cfasl" in setup.l obsolete
20. (sstatus translink on) does what?
21. Figuire out how to make CL arrays behave like old-style arrays. [DONE]
22. Figure out problem with "match" macro instances not compiling. [DONE]
23. Deal with old-style variable number of args "defun foo nargs..."    [DONE]
24. Fix "concat" to allow concatenation with empty string, to fix "match".  [DONE]
25. Fix compatibility string functions to get case and escapes identical to Franz LISP. [DONE]
26. Fix "throw" and "catch", which work differently in CL. Parameters are reversed. [DONE]
27. "(newenode)" returns a form which causes a stack overflow.[DONE]
28. "mapeqclass" is defined in two files.
29. Figure out what value "false" is supposed to have. - change throw tag name [DONE]
30. Make "concat" n-ary. [DONE]
31. Find why rules are not firing. [DONE]
32. Convert all trace functions in traceaids. [DONE]
33. Fix "mapcone", which calls "map" with too few parameters. [DONE]
34. Find out why rule didn't get applied in case U01.



NOTES

Stack overflow bug.

Stack overflow was in the debug print function for printing the
result of trying to take "car" of a structure. 

Failing at  (EQ (GETENODE ZNODE) NODE) in ze.lisp line 85.
GETENODE does not expect a ZNODE; it wants a cons cell.
This is in "interntimes" in ze.lisp.
"interntimes" is called with an argument "node", and it's
a valid enode. Generally, the code uses "node" when talking
about an enode, and "znode" when talking about a znode.
Enodes are for general terms; znodes are for numerics.

ZNODE comes from (tellz l node). Tellz, in z.lisp, has lots of debugging
machinery.  Turning it on in debug.lisp on produces output, giving the node number.

In "interntimes", we have

    (or (setq znode (tellz l node)) (return t))
    (or (eq node (getenode znode)) (zmerge node (getenode znode)))))

So whatever comes out of (tellz l node) needs to be acceptable
to (getenode znode). It's not. "tellz" is returning a pure znode,
and (getenode znode) wants a cons cell.

Tellz is working on enode 28 and returns a pure znode.

Tellz takes the path that leads to lines 83-85 and to

(return (baserowz* i)) with i=1. "baserowz*" is an array,
and element 1 is a pure znode, not a cons cell.

  i=1
  lastrowz*=2
  
  Then off into eqrowz, fails, and we go round the DO loop again.
  
  i=0, last time case
  and I typed ":n" and the trace ran away and ended at the
  same bad "car" point.
  
  Control was headed for returning the value (baserowz* drowz*)
  where drowz* is 2. That's an array access returning a pure
  znode.
  
  So the problem is that "baserowz*" contains pure znodes,
  while "interntimes" is using "getenode", which wants a cons cell.
  
  So how did this ever work, or what did I break?
  
  Looking at other code that accesses "baserowz*", such as
  "exchangeownerz" in z.l, the code clearly assumes
  that "baserowz" is an array of znodes.
  
  Found it in the Franz LISP manual:
  
"Although hunks are not list cells, you can still access the
first two hunk elements with cdr and car and you can access any hunk 
element with cxr+."

Somewhat kludgy fix in place. Assumes the node field wanted is "den" if item is a node. This may be wrong.

 --
 
 Code assumes that hunks can have property lists. CL doesn't allow this for structs. So "get" fails 
 in (ENODEATOM) in e.lisp.  But does the code really put 'enode properties on enodes, or is it
 simply calling "get" on enodes, expecting that to fail? Must check all sets of 'enode property.
 If none set on enode structs, the test in ENODEATOM can be fixed.
 
 
--

For test U01:

(testcase 'u01 t '(implies! (allzero (a~5v01) (consti! 1) (consti! 50))
	             (allzero (storea! (a~5v01) (consti! 51) (consti! 10))
			      (consti! 1) (consti! 50))))

This rule is not being applied:

unchanged-allzero-rule --  Usable on conclusions only, free variables 
(A B I J V X) 
Trigger pattern sequence: 
((ALLZERO B I J) (ALLZERO A I J) (STOREA! A X V) (NUMBERP! I) (ARRAYP! A)) 

NUMBERP!(I)
and NUMBERP!(J)
and NUMBERP!(X)
and ARRAYP!(A)
and ALLZERO(A,I,J)
and (B = <A,X,V>)
and (GTN!(I,X) or GTN!(X,J))
implies
  ALLZERO(B,I,J)
  
  It's being tried, twice, as (tracepfire) shows. 
  
  After fixing enode printing, found that the rule is matching properly
  with correct bindings, but the proof still fails.
  
  Gets to "ifexists" with all the variables bound.
  Gets through "ifexists" at least as far as the call to "pushcontext".
  Lost control of the trace before "mapeqclass".
  Possible trouble with "mapeqclass", which is a macro defined with
  "defsmac". The macro has a goto in it, to a tag "a". In what context
  is "a" defined?  Each instantiatiation of "mapeclass" defines "a".
  
  That's OK, because go tags are local to a tagbody, and the enclosing
  "prog" defines a tagbody.
  
  At a higher level, what's going on here? The rule has matched.
  Now there must be proof goals to validate the NUMBERP! and GTN!
  conditions. Not sure how that works. Need to get to the "mapeclass"
  call again and see what's being sent where.

  Added a very simple rule to see if rules work at all. Caused a trap
  in "ss" of newsimp, because there is a enode where a cons was
  expected. Possible "atomp" problem?  "atomp" returns false
  for enodes, just as FL "atom" did for hunks".





